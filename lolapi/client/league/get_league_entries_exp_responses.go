// Code generated by go-swagger; DO NOT EDIT.

package league

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/andresperezl/gol/lolapi/models"
)

// GetLeagueEntriesExpReader is a Reader for the GetLeagueEntriesExp structure.
type GetLeagueEntriesExpReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLeagueEntriesExpReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLeagueEntriesExpOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLeagueEntriesExpBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLeagueEntriesExpUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLeagueEntriesExpForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLeagueEntriesExpNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetLeagueEntriesExpMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetLeagueEntriesExpUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetLeagueEntriesExpTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLeagueEntriesExpInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetLeagueEntriesExpBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetLeagueEntriesExpServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetLeagueEntriesExpGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetLeagueEntriesExpOK creates a GetLeagueEntriesExpOK with default headers values
func NewGetLeagueEntriesExpOK() *GetLeagueEntriesExpOK {
	return &GetLeagueEntriesExpOK{}
}

/*GetLeagueEntriesExpOK handles this case with default header values.

OK
*/
type GetLeagueEntriesExpOK struct {
	Payload []*models.LeagueEntry
}

func (o *GetLeagueEntriesExpOK) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpOK  %+v", 200, o.Payload)
}

func (o *GetLeagueEntriesExpOK) GetPayload() []*models.LeagueEntry {
	return o.Payload
}

func (o *GetLeagueEntriesExpOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeagueEntriesExpBadRequest creates a GetLeagueEntriesExpBadRequest with default headers values
func NewGetLeagueEntriesExpBadRequest() *GetLeagueEntriesExpBadRequest {
	return &GetLeagueEntriesExpBadRequest{}
}

/*GetLeagueEntriesExpBadRequest handles this case with default header values.

Bad request
*/
type GetLeagueEntriesExpBadRequest struct {
	Payload *models.APIError
}

func (o *GetLeagueEntriesExpBadRequest) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpBadRequest  %+v", 400, o.Payload)
}

func (o *GetLeagueEntriesExpBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetLeagueEntriesExpBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeagueEntriesExpUnauthorized creates a GetLeagueEntriesExpUnauthorized with default headers values
func NewGetLeagueEntriesExpUnauthorized() *GetLeagueEntriesExpUnauthorized {
	return &GetLeagueEntriesExpUnauthorized{}
}

/*GetLeagueEntriesExpUnauthorized handles this case with default header values.

Unauthorized
*/
type GetLeagueEntriesExpUnauthorized struct {
	Payload *models.APIError
}

func (o *GetLeagueEntriesExpUnauthorized) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLeagueEntriesExpUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetLeagueEntriesExpUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeagueEntriesExpForbidden creates a GetLeagueEntriesExpForbidden with default headers values
func NewGetLeagueEntriesExpForbidden() *GetLeagueEntriesExpForbidden {
	return &GetLeagueEntriesExpForbidden{}
}

/*GetLeagueEntriesExpForbidden handles this case with default header values.

Forbidden
*/
type GetLeagueEntriesExpForbidden struct {
	Payload *models.APIError
}

func (o *GetLeagueEntriesExpForbidden) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpForbidden  %+v", 403, o.Payload)
}

func (o *GetLeagueEntriesExpForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetLeagueEntriesExpForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeagueEntriesExpNotFound creates a GetLeagueEntriesExpNotFound with default headers values
func NewGetLeagueEntriesExpNotFound() *GetLeagueEntriesExpNotFound {
	return &GetLeagueEntriesExpNotFound{}
}

/*GetLeagueEntriesExpNotFound handles this case with default header values.

Not found
*/
type GetLeagueEntriesExpNotFound struct {
	Payload *models.APIError
}

func (o *GetLeagueEntriesExpNotFound) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpNotFound  %+v", 404, o.Payload)
}

func (o *GetLeagueEntriesExpNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetLeagueEntriesExpNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeagueEntriesExpMethodNotAllowed creates a GetLeagueEntriesExpMethodNotAllowed with default headers values
func NewGetLeagueEntriesExpMethodNotAllowed() *GetLeagueEntriesExpMethodNotAllowed {
	return &GetLeagueEntriesExpMethodNotAllowed{}
}

/*GetLeagueEntriesExpMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GetLeagueEntriesExpMethodNotAllowed struct {
	Payload *models.APIError
}

func (o *GetLeagueEntriesExpMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetLeagueEntriesExpMethodNotAllowed) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetLeagueEntriesExpMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeagueEntriesExpUnsupportedMediaType creates a GetLeagueEntriesExpUnsupportedMediaType with default headers values
func NewGetLeagueEntriesExpUnsupportedMediaType() *GetLeagueEntriesExpUnsupportedMediaType {
	return &GetLeagueEntriesExpUnsupportedMediaType{}
}

/*GetLeagueEntriesExpUnsupportedMediaType handles this case with default header values.

Unsopported media type
*/
type GetLeagueEntriesExpUnsupportedMediaType struct {
	Payload *models.APIError
}

func (o *GetLeagueEntriesExpUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetLeagueEntriesExpUnsupportedMediaType) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetLeagueEntriesExpUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeagueEntriesExpTooManyRequests creates a GetLeagueEntriesExpTooManyRequests with default headers values
func NewGetLeagueEntriesExpTooManyRequests() *GetLeagueEntriesExpTooManyRequests {
	return &GetLeagueEntriesExpTooManyRequests{}
}

/*GetLeagueEntriesExpTooManyRequests handles this case with default header values.

Rate limit Exceeded
*/
type GetLeagueEntriesExpTooManyRequests struct {
	Payload *models.APIError
}

func (o *GetLeagueEntriesExpTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLeagueEntriesExpTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetLeagueEntriesExpTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeagueEntriesExpInternalServerError creates a GetLeagueEntriesExpInternalServerError with default headers values
func NewGetLeagueEntriesExpInternalServerError() *GetLeagueEntriesExpInternalServerError {
	return &GetLeagueEntriesExpInternalServerError{}
}

/*GetLeagueEntriesExpInternalServerError handles this case with default header values.

Internal server error
*/
type GetLeagueEntriesExpInternalServerError struct {
	Payload *models.APIError
}

func (o *GetLeagueEntriesExpInternalServerError) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLeagueEntriesExpInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetLeagueEntriesExpInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeagueEntriesExpBadGateway creates a GetLeagueEntriesExpBadGateway with default headers values
func NewGetLeagueEntriesExpBadGateway() *GetLeagueEntriesExpBadGateway {
	return &GetLeagueEntriesExpBadGateway{}
}

/*GetLeagueEntriesExpBadGateway handles this case with default header values.

Bad gateway
*/
type GetLeagueEntriesExpBadGateway struct {
	Payload *models.APIError
}

func (o *GetLeagueEntriesExpBadGateway) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpBadGateway  %+v", 502, o.Payload)
}

func (o *GetLeagueEntriesExpBadGateway) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetLeagueEntriesExpBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeagueEntriesExpServiceUnavailable creates a GetLeagueEntriesExpServiceUnavailable with default headers values
func NewGetLeagueEntriesExpServiceUnavailable() *GetLeagueEntriesExpServiceUnavailable {
	return &GetLeagueEntriesExpServiceUnavailable{}
}

/*GetLeagueEntriesExpServiceUnavailable handles this case with default header values.

Service Unavailable
*/
type GetLeagueEntriesExpServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetLeagueEntriesExpServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetLeagueEntriesExpServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetLeagueEntriesExpServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLeagueEntriesExpGatewayTimeout creates a GetLeagueEntriesExpGatewayTimeout with default headers values
func NewGetLeagueEntriesExpGatewayTimeout() *GetLeagueEntriesExpGatewayTimeout {
	return &GetLeagueEntriesExpGatewayTimeout{}
}

/*GetLeagueEntriesExpGatewayTimeout handles this case with default header values.

Gateway timeout
*/
type GetLeagueEntriesExpGatewayTimeout struct {
	Payload *models.APIError
}

func (o *GetLeagueEntriesExpGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /league-exp/v4/entries/{queue}/{tier}/{division}][%d] getLeagueEntriesExpGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetLeagueEntriesExpGatewayTimeout) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetLeagueEntriesExpGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
