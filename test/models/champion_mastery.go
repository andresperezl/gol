// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ChampionMastery  Contains single Champion Mastery information for player and champion combination
// swagger:model ChampionMastery
type ChampionMastery struct {

	// champion Id
	ChampionID ChampionID `json:"championId,omitempty"`

	// champion level
	ChampionLevel ChampionLevel `json:"championLevel,omitempty"`

	// champion points
	ChampionPoints ChampionPoints `json:"championPoints,omitempty"`

	// champion points since last level
	ChampionPointsSinceLastLevel ChampionPointsSinceLastLevel `json:"championPointsSinceLastLevel,omitempty"`

	// champion points until next level
	ChampionPointsUntilNextLevel ChampionPointsUntilNextLevel `json:"championPointsUntilNextLevel,omitempty"`

	// chest granted
	ChestGranted ChestGranted `json:"chestGranted,omitempty"`

	// last play time
	LastPlayTime LastPlayTime `json:"lastPlayTime,omitempty"`

	// summoner Id
	SummonerID EncryptedSummonerID `json:"summonerId,omitempty"`

	// tokens earned
	TokensEarned TokensEarned `json:"tokensEarned,omitempty"`
}

// Validate validates this champion mastery
func (m *ChampionMastery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChampionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChampionLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChampionPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChampionPointsSinceLastLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChampionPointsUntilNextLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChestGranted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPlayTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummonerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokensEarned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChampionMastery) validateChampionID(formats strfmt.Registry) error {

	if swag.IsZero(m.ChampionID) { // not required
		return nil
	}

	if err := m.ChampionID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("championId")
		}
		return err
	}

	return nil
}

func (m *ChampionMastery) validateChampionLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.ChampionLevel) { // not required
		return nil
	}

	if err := m.ChampionLevel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("championLevel")
		}
		return err
	}

	return nil
}

func (m *ChampionMastery) validateChampionPoints(formats strfmt.Registry) error {

	if swag.IsZero(m.ChampionPoints) { // not required
		return nil
	}

	if err := m.ChampionPoints.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("championPoints")
		}
		return err
	}

	return nil
}

func (m *ChampionMastery) validateChampionPointsSinceLastLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.ChampionPointsSinceLastLevel) { // not required
		return nil
	}

	if err := m.ChampionPointsSinceLastLevel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("championPointsSinceLastLevel")
		}
		return err
	}

	return nil
}

func (m *ChampionMastery) validateChampionPointsUntilNextLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.ChampionPointsUntilNextLevel) { // not required
		return nil
	}

	if err := m.ChampionPointsUntilNextLevel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("championPointsUntilNextLevel")
		}
		return err
	}

	return nil
}

func (m *ChampionMastery) validateChestGranted(formats strfmt.Registry) error {

	if swag.IsZero(m.ChestGranted) { // not required
		return nil
	}

	if err := m.ChestGranted.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("chestGranted")
		}
		return err
	}

	return nil
}

func (m *ChampionMastery) validateLastPlayTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastPlayTime) { // not required
		return nil
	}

	if err := m.LastPlayTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastPlayTime")
		}
		return err
	}

	return nil
}

func (m *ChampionMastery) validateSummonerID(formats strfmt.Registry) error {

	if swag.IsZero(m.SummonerID) { // not required
		return nil
	}

	if err := m.SummonerID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("summonerId")
		}
		return err
	}

	return nil
}

func (m *ChampionMastery) validateTokensEarned(formats strfmt.Registry) error {

	if swag.IsZero(m.TokensEarned) { // not required
		return nil
	}

	if err := m.TokensEarned.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tokensEarned")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChampionMastery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChampionMastery) UnmarshalBinary(b []byte) error {
	var res ChampionMastery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
