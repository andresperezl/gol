// Code generated by go-swagger; DO NOT EDIT.

package champion_mastery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetChampionMasteryScoreHandlerFunc turns a function with the right signature into a get champion mastery score handler
type GetChampionMasteryScoreHandlerFunc func(GetChampionMasteryScoreParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetChampionMasteryScoreHandlerFunc) Handle(params GetChampionMasteryScoreParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetChampionMasteryScoreHandler interface for that can handle valid get champion mastery score params
type GetChampionMasteryScoreHandler interface {
	Handle(GetChampionMasteryScoreParams, interface{}) middleware.Responder
}

// NewGetChampionMasteryScore creates a new http.Handler for the get champion mastery score operation
func NewGetChampionMasteryScore(ctx *middleware.Context, handler GetChampionMasteryScoreHandler) *GetChampionMasteryScore {
	return &GetChampionMasteryScore{Context: ctx, Handler: handler}
}

/*GetChampionMasteryScore swagger:route GET /champion-mastery/v4/scores/by-summoner/{encryptedSummonerId} championMastery getChampionMasteryScore

Get a champion mastery by player ID and champion ID

*/
type GetChampionMasteryScore struct {
	Context *middleware.Context
	Handler GetChampionMasteryScoreHandler
}

func (o *GetChampionMasteryScore) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetChampionMasteryScoreParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
