// Code generated by go-swagger; DO NOT EDIT.

package champion_mastery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new champion mastery API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for champion mastery API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAllChampionMasteries gets all champion mastery entries sorted by number of champion points descending
*/
func (a *Client) GetAllChampionMasteries(params *GetAllChampionMasteriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllChampionMasteriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllChampionMasteriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllChampionMasteries",
		Method:             "GET",
		PathPattern:        "/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllChampionMasteriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllChampionMasteriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllChampionMasteries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChampionMastery gets a champion mastery by player ID and champion ID
*/
func (a *Client) GetChampionMastery(params *GetChampionMasteryParams, authInfo runtime.ClientAuthInfoWriter) (*GetChampionMasteryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChampionMasteryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChampionMastery",
		Method:             "GET",
		PathPattern:        "/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/by-champion/{championId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChampionMasteryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChampionMasteryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChampionMastery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChampionMasteryScore gets a champion mastery by player ID and champion ID
*/
func (a *Client) GetChampionMasteryScore(params *GetChampionMasteryScoreParams, authInfo runtime.ClientAuthInfoWriter) (*GetChampionMasteryScoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChampionMasteryScoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChampionMasteryScore",
		Method:             "GET",
		PathPattern:        "/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChampionMasteryScoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChampionMasteryScoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChampionMasteryScore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
