// Code generated by go-swagger; DO NOT EDIT.

package league

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/andresperezl/gol/lolapi/models"
)

// GetApexLeagueReader is a Reader for the GetApexLeague structure.
type GetApexLeagueReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetApexLeagueReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetApexLeagueOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetApexLeagueBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetApexLeagueUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetApexLeagueForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetApexLeagueNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetApexLeagueMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetApexLeagueUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetApexLeagueTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetApexLeagueInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetApexLeagueBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetApexLeagueServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetApexLeagueGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetApexLeagueOK creates a GetApexLeagueOK with default headers values
func NewGetApexLeagueOK() *GetApexLeagueOK {
	return &GetApexLeagueOK{}
}

/*GetApexLeagueOK handles this case with default header values.

OK
*/
type GetApexLeagueOK struct {
	Payload *models.LeagueList
}

func (o *GetApexLeagueOK) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueOK  %+v", 200, o.Payload)
}

func (o *GetApexLeagueOK) GetPayload() *models.LeagueList {
	return o.Payload
}

func (o *GetApexLeagueOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LeagueList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApexLeagueBadRequest creates a GetApexLeagueBadRequest with default headers values
func NewGetApexLeagueBadRequest() *GetApexLeagueBadRequest {
	return &GetApexLeagueBadRequest{}
}

/*GetApexLeagueBadRequest handles this case with default header values.

Bad request
*/
type GetApexLeagueBadRequest struct {
	Payload *models.APIError
}

func (o *GetApexLeagueBadRequest) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueBadRequest  %+v", 400, o.Payload)
}

func (o *GetApexLeagueBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetApexLeagueBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApexLeagueUnauthorized creates a GetApexLeagueUnauthorized with default headers values
func NewGetApexLeagueUnauthorized() *GetApexLeagueUnauthorized {
	return &GetApexLeagueUnauthorized{}
}

/*GetApexLeagueUnauthorized handles this case with default header values.

Unauthorized
*/
type GetApexLeagueUnauthorized struct {
	Payload *models.APIError
}

func (o *GetApexLeagueUnauthorized) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueUnauthorized  %+v", 401, o.Payload)
}

func (o *GetApexLeagueUnauthorized) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetApexLeagueUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApexLeagueForbidden creates a GetApexLeagueForbidden with default headers values
func NewGetApexLeagueForbidden() *GetApexLeagueForbidden {
	return &GetApexLeagueForbidden{}
}

/*GetApexLeagueForbidden handles this case with default header values.

Forbidden
*/
type GetApexLeagueForbidden struct {
	Payload *models.APIError
}

func (o *GetApexLeagueForbidden) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueForbidden  %+v", 403, o.Payload)
}

func (o *GetApexLeagueForbidden) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetApexLeagueForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApexLeagueNotFound creates a GetApexLeagueNotFound with default headers values
func NewGetApexLeagueNotFound() *GetApexLeagueNotFound {
	return &GetApexLeagueNotFound{}
}

/*GetApexLeagueNotFound handles this case with default header values.

Not found
*/
type GetApexLeagueNotFound struct {
	Payload *models.APIError
}

func (o *GetApexLeagueNotFound) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueNotFound  %+v", 404, o.Payload)
}

func (o *GetApexLeagueNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetApexLeagueNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApexLeagueMethodNotAllowed creates a GetApexLeagueMethodNotAllowed with default headers values
func NewGetApexLeagueMethodNotAllowed() *GetApexLeagueMethodNotAllowed {
	return &GetApexLeagueMethodNotAllowed{}
}

/*GetApexLeagueMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GetApexLeagueMethodNotAllowed struct {
	Payload *models.APIError
}

func (o *GetApexLeagueMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetApexLeagueMethodNotAllowed) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetApexLeagueMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApexLeagueUnsupportedMediaType creates a GetApexLeagueUnsupportedMediaType with default headers values
func NewGetApexLeagueUnsupportedMediaType() *GetApexLeagueUnsupportedMediaType {
	return &GetApexLeagueUnsupportedMediaType{}
}

/*GetApexLeagueUnsupportedMediaType handles this case with default header values.

Unsopported media type
*/
type GetApexLeagueUnsupportedMediaType struct {
	Payload *models.APIError
}

func (o *GetApexLeagueUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetApexLeagueUnsupportedMediaType) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetApexLeagueUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApexLeagueTooManyRequests creates a GetApexLeagueTooManyRequests with default headers values
func NewGetApexLeagueTooManyRequests() *GetApexLeagueTooManyRequests {
	return &GetApexLeagueTooManyRequests{}
}

/*GetApexLeagueTooManyRequests handles this case with default header values.

Rate limit Exceeded
*/
type GetApexLeagueTooManyRequests struct {
	Payload *models.APIError
}

func (o *GetApexLeagueTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetApexLeagueTooManyRequests) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetApexLeagueTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApexLeagueInternalServerError creates a GetApexLeagueInternalServerError with default headers values
func NewGetApexLeagueInternalServerError() *GetApexLeagueInternalServerError {
	return &GetApexLeagueInternalServerError{}
}

/*GetApexLeagueInternalServerError handles this case with default header values.

Internal server error
*/
type GetApexLeagueInternalServerError struct {
	Payload *models.APIError
}

func (o *GetApexLeagueInternalServerError) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueInternalServerError  %+v", 500, o.Payload)
}

func (o *GetApexLeagueInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetApexLeagueInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApexLeagueBadGateway creates a GetApexLeagueBadGateway with default headers values
func NewGetApexLeagueBadGateway() *GetApexLeagueBadGateway {
	return &GetApexLeagueBadGateway{}
}

/*GetApexLeagueBadGateway handles this case with default header values.

Bad gateway
*/
type GetApexLeagueBadGateway struct {
	Payload *models.APIError
}

func (o *GetApexLeagueBadGateway) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueBadGateway  %+v", 502, o.Payload)
}

func (o *GetApexLeagueBadGateway) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetApexLeagueBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApexLeagueServiceUnavailable creates a GetApexLeagueServiceUnavailable with default headers values
func NewGetApexLeagueServiceUnavailable() *GetApexLeagueServiceUnavailable {
	return &GetApexLeagueServiceUnavailable{}
}

/*GetApexLeagueServiceUnavailable handles this case with default header values.

Service Unavailable
*/
type GetApexLeagueServiceUnavailable struct {
	Payload *models.APIError
}

func (o *GetApexLeagueServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetApexLeagueServiceUnavailable) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetApexLeagueServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApexLeagueGatewayTimeout creates a GetApexLeagueGatewayTimeout with default headers values
func NewGetApexLeagueGatewayTimeout() *GetApexLeagueGatewayTimeout {
	return &GetApexLeagueGatewayTimeout{}
}

/*GetApexLeagueGatewayTimeout handles this case with default header values.

Gateway timeout
*/
type GetApexLeagueGatewayTimeout struct {
	Payload *models.APIError
}

func (o *GetApexLeagueGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /league/v4/{apexLeague}leagues/by-queue/{queue}][%d] getApexLeagueGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetApexLeagueGatewayTimeout) GetPayload() *models.APIError {
	return o.Payload
}

func (o *GetApexLeagueGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
