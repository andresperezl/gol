// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LeagueEntry league entry
// swagger:model LeagueEntry
type LeagueEntry struct {

	// fresh blood
	// Read Only: true
	FreshBlood *bool `json:"freshBlood,omitempty"`

	// hot streak
	// Read Only: true
	HotStreak *bool `json:"hotStreak,omitempty"`

	// inactive
	// Read Only: true
	Inactive *bool `json:"inactive,omitempty"`

	// league Id
	// Read Only: true
	LeagueID string `json:"leagueId,omitempty"`

	// league points
	// Read Only: true
	LeaguePoints int32 `json:"leaguePoints,omitempty"`

	// Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
	// Read Only: true
	Losses int32 `json:"losses,omitempty"`

	// mini series
	MiniSeries *MiniSeries `json:"miniSeries,omitempty"`

	// queue type
	// Read Only: true
	QueueType string `json:"queueType,omitempty"`

	// rank
	// Read Only: true
	Rank string `json:"rank,omitempty"`

	// Summoner ID (Encrypted)
	// Read Only: true
	SummonerID string `json:"summonerId,omitempty"`

	// summoner name
	// Read Only: true
	SummonerName string `json:"summonerName,omitempty"`

	// tier
	// Read Only: true
	Tier string `json:"tier,omitempty"`

	// veteran
	// Read Only: true
	Veteran *bool `json:"veteran,omitempty"`

	// Winning team on Summoners Rift. First placement in Teamfight Tactics.
	// Read Only: true
	Wins int32 `json:"wins,omitempty"`
}

// Validate validates this league entry
func (m *LeagueEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMiniSeries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeagueEntry) validateMiniSeries(formats strfmt.Registry) error {

	if swag.IsZero(m.MiniSeries) { // not required
		return nil
	}

	if m.MiniSeries != nil {
		if err := m.MiniSeries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("miniSeries")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LeagueEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeagueEntry) UnmarshalBinary(b []byte) error {
	var res LeagueEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
