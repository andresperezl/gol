// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// ChampionMastery  Contains single Champion Mastery information for player and champion combination
// swagger:model ChampionMastery
type ChampionMastery struct {

	// Champion ID
	// Read Only: true
	ChampionID int64 `json:"championId,omitempty"`

	// Champion level for specified player and champion combination
	// Read Only: true
	ChampionLevel int32 `json:"championLevel,omitempty"`

	// Total number of champion points for this player and champion combination - they are used to determine championLevel
	// Read Only: true
	ChampionPoints int32 `json:"championPoints,omitempty"`

	// Number of points earned since current level has been achieved
	// Read Only: true
	ChampionPointsSinceLastLevel int64 `json:"championPointsSinceLastLevel,omitempty"`

	// Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion
	// Read Only: true
	ChampionPointsUntilNextLevel int64 `json:"championPointsUntilNextLevel,omitempty"`

	// Is chest granted for this champion or not in current season
	// Read Only: true
	ChestGranted *bool `json:"chestGranted,omitempty"`

	// Last time this champion was played by this player - in Unix milliseconds time format
	// Read Only: true
	LastPlayTime int64 `json:"lastPlayTime,omitempty"`

	// Summoner ID (Encrypted)
	// Read Only: true
	SummonerID string `json:"summonerId,omitempty"`

	// The token earned for this champion to levelup
	// Read Only: true
	TokensEarned int32 `json:"tokensEarned,omitempty"`
}

// Validate validates this champion mastery
func (m *ChampionMastery) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChampionMastery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChampionMastery) UnmarshalBinary(b []byte) error {
	var res ChampionMastery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
