// Code generated by go-swagger; DO NOT EDIT.

package champion

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/andresperezl/gol/models"
)

// GetChampionInfoReader is a Reader for the GetChampionInfo structure.
type GetChampionInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetChampionInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetChampionInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetChampionInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetChampionInfoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetChampionInfoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetChampionInfoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetChampionInfoMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetChampionInfoUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetChampionInfoTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetChampionInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewGetChampionInfoBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetChampionInfoServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetChampionInfoGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetChampionInfoOK creates a GetChampionInfoOK with default headers values
func NewGetChampionInfoOK() *GetChampionInfoOK {
	return &GetChampionInfoOK{}
}

/*GetChampionInfoOK handles this case with default header values.

OK
*/
type GetChampionInfoOK struct {
	Payload *models.ChampionInfo
}

func (o *GetChampionInfoOK) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoOK  %+v", 200, o.Payload)
}

func (o *GetChampionInfoOK) GetPayload() *models.ChampionInfo {
	return o.Payload
}

func (o *GetChampionInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChampionInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChampionInfoBadRequest creates a GetChampionInfoBadRequest with default headers values
func NewGetChampionInfoBadRequest() *GetChampionInfoBadRequest {
	return &GetChampionInfoBadRequest{}
}

/*GetChampionInfoBadRequest handles this case with default header values.

Bad request
*/
type GetChampionInfoBadRequest struct {
	Payload *models.Error
}

func (o *GetChampionInfoBadRequest) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoBadRequest  %+v", 400, o.Payload)
}

func (o *GetChampionInfoBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChampionInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChampionInfoUnauthorized creates a GetChampionInfoUnauthorized with default headers values
func NewGetChampionInfoUnauthorized() *GetChampionInfoUnauthorized {
	return &GetChampionInfoUnauthorized{}
}

/*GetChampionInfoUnauthorized handles this case with default header values.

Unauthorized
*/
type GetChampionInfoUnauthorized struct {
	Payload *models.Error
}

func (o *GetChampionInfoUnauthorized) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoUnauthorized  %+v", 401, o.Payload)
}

func (o *GetChampionInfoUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChampionInfoUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChampionInfoForbidden creates a GetChampionInfoForbidden with default headers values
func NewGetChampionInfoForbidden() *GetChampionInfoForbidden {
	return &GetChampionInfoForbidden{}
}

/*GetChampionInfoForbidden handles this case with default header values.

Forbidden
*/
type GetChampionInfoForbidden struct {
	Payload *models.Error
}

func (o *GetChampionInfoForbidden) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoForbidden  %+v", 403, o.Payload)
}

func (o *GetChampionInfoForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChampionInfoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChampionInfoNotFound creates a GetChampionInfoNotFound with default headers values
func NewGetChampionInfoNotFound() *GetChampionInfoNotFound {
	return &GetChampionInfoNotFound{}
}

/*GetChampionInfoNotFound handles this case with default header values.

Not found
*/
type GetChampionInfoNotFound struct {
	Payload *models.Error
}

func (o *GetChampionInfoNotFound) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoNotFound  %+v", 404, o.Payload)
}

func (o *GetChampionInfoNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChampionInfoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChampionInfoMethodNotAllowed creates a GetChampionInfoMethodNotAllowed with default headers values
func NewGetChampionInfoMethodNotAllowed() *GetChampionInfoMethodNotAllowed {
	return &GetChampionInfoMethodNotAllowed{}
}

/*GetChampionInfoMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GetChampionInfoMethodNotAllowed struct {
	Payload *models.Error
}

func (o *GetChampionInfoMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetChampionInfoMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChampionInfoMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChampionInfoUnsupportedMediaType creates a GetChampionInfoUnsupportedMediaType with default headers values
func NewGetChampionInfoUnsupportedMediaType() *GetChampionInfoUnsupportedMediaType {
	return &GetChampionInfoUnsupportedMediaType{}
}

/*GetChampionInfoUnsupportedMediaType handles this case with default header values.

Unsopported media type
*/
type GetChampionInfoUnsupportedMediaType struct {
	Payload *models.Error
}

func (o *GetChampionInfoUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetChampionInfoUnsupportedMediaType) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChampionInfoUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChampionInfoTooManyRequests creates a GetChampionInfoTooManyRequests with default headers values
func NewGetChampionInfoTooManyRequests() *GetChampionInfoTooManyRequests {
	return &GetChampionInfoTooManyRequests{}
}

/*GetChampionInfoTooManyRequests handles this case with default header values.

Rate limit Exceeded
*/
type GetChampionInfoTooManyRequests struct {
	Payload *models.Error
}

func (o *GetChampionInfoTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetChampionInfoTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChampionInfoTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChampionInfoInternalServerError creates a GetChampionInfoInternalServerError with default headers values
func NewGetChampionInfoInternalServerError() *GetChampionInfoInternalServerError {
	return &GetChampionInfoInternalServerError{}
}

/*GetChampionInfoInternalServerError handles this case with default header values.

Internal server error
*/
type GetChampionInfoInternalServerError struct {
	Payload *models.Error
}

func (o *GetChampionInfoInternalServerError) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *GetChampionInfoInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChampionInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChampionInfoBadGateway creates a GetChampionInfoBadGateway with default headers values
func NewGetChampionInfoBadGateway() *GetChampionInfoBadGateway {
	return &GetChampionInfoBadGateway{}
}

/*GetChampionInfoBadGateway handles this case with default header values.

Bad gateway
*/
type GetChampionInfoBadGateway struct {
	Payload *models.Error
}

func (o *GetChampionInfoBadGateway) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoBadGateway  %+v", 502, o.Payload)
}

func (o *GetChampionInfoBadGateway) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChampionInfoBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChampionInfoServiceUnavailable creates a GetChampionInfoServiceUnavailable with default headers values
func NewGetChampionInfoServiceUnavailable() *GetChampionInfoServiceUnavailable {
	return &GetChampionInfoServiceUnavailable{}
}

/*GetChampionInfoServiceUnavailable handles this case with default header values.

Service Unavailable
*/
type GetChampionInfoServiceUnavailable struct {
	Payload *models.Error
}

func (o *GetChampionInfoServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetChampionInfoServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChampionInfoServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChampionInfoGatewayTimeout creates a GetChampionInfoGatewayTimeout with default headers values
func NewGetChampionInfoGatewayTimeout() *GetChampionInfoGatewayTimeout {
	return &GetChampionInfoGatewayTimeout{}
}

/*GetChampionInfoGatewayTimeout handles this case with default header values.

Gateway timeout
*/
type GetChampionInfoGatewayTimeout struct {
	Payload *models.Error
}

func (o *GetChampionInfoGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /platform/v3/champion-rotations][%d] getChampionInfoGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetChampionInfoGatewayTimeout) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetChampionInfoGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
